#!/usr/bin/perl -w

# Thu Jul  4 21:30:42 BST 2013
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized'; use utf8;

use Cwd 'abs_path';

our ($mydir, $myname);
BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
    $mydir= $ENV{ML2JSON_MYDIR} if $ENV{ML2JSON_MYDIR};
}
use lib "$mydir/perllib";
use lib "$mydir/ftemplate/lib";
use lib "$mydir/lib";

our $tmpbase="/tmp/$myname";
our $tmplink= "$ENV{HOME}/.$myname-tmp"; ## ok to use that path?
our $default_config_path= "$mydir/default_config.pl";
our $config= require $default_config_path;

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname sourcedir-or-file(s) [--json-to targetfile]

  sourcedir should be a directory with *.mbox files directly in it
  (but see --recurse).  If a file is given instead, it is assumed to
  be an mbox file.  Paths to maildirs (with cur and new
  subdirectories) or ezmlm archive directories are auto-detected and
  treated accordingly.

  All options and actions except for --deidentify, --open-message-id
  and --open-identify (and --help and --config) can alternatively be
  configured from a config file, see --config. Command line options
  have precedence. Sourcepath(s) can be configured as a 'sourcepaths'
  config key holding an array. Some options can *only* be configured
  in the config file.

  Sourcepaths can be files ending in .gz or .bz2, in which case they
  are uncompressed on the fly. (Note that this leads to different
  identify values, though.)

  The --json-to, --html-to and --source-to actions can be combined in
  the same run.


  Actions:

    --json-to file
                where the JSON output should go (use '-' for stdout).

    --html-to dir
                create html files in the specified directory
                (currently meant for debugging only)

    --html-index file
                create html file with thread 'index'; --html-to should
                be given, too, so that the link targets (currently
                assumed to be in the same directory) are available

    --source-to dir
                create files <dir>/<md5hash>/<number>.txt (where
                <md5hash>/<number> is the same string that
                --deidentify takes) and link them in the html files
                produced with --html-to

    --open-message-id message-id
                run \$BROWSER on the given message that was written
                before using --html-to. Needs html-to option again to
                know where the files are, but doesn't regenerare files
                nor does it run json generation.

    --open-identify identifystring
                run \$BROWSER on the given message that was written
                before using --html-to. Needs html-to option again to
                know where the files are, but doesn't regenerare files
                nor does it run json generation.

    --deidentify string
                print message identified by the given string, which is
                output into the JSON by the json_identify method (as
                'identify' field by default) or printed along with
                WARN and ERROR messages.
                Only works if the generated files are still available.
                If --attachment-basedir was given before, it has to
                be specified for --deidentify as well.

    --show-mbox-path md5hexstring[/number]
                show path of original mbox file for a given mbox
                identifier (as they are used in identify strings).

    --cleanup   delete currently used temp directory at $tmpbase*


  Options:

    --config myconfig.pl
                load given file containing perl code, which must end
                with a perl hashref; see default configuration in
                '$default_config_path'
                for the options that can be set that way.  Several
                --config options can be given, each subsequent one
                overrides options loaded from the previous ones (with
                regards to the keys of the top level hash ref). The
                previously loaded config can be accessed from
                \$main::config.  Keys in the config file use
                underscore to separate words, not '-'.

    --verbose   show NOTEs in addition to WARNings on stderr

    --recurse   recurse into subdirectories of sourcedir-or-file

    --mbox-glob globstring
                glob to use to find files in directories that contain
                mboxes. Defaults to '$$config{mbox_glob}'.


    --attachment-basedir path
                use path instead of a random subdirectory below
                '$tmpbase' for the output; the output currently
                contains serialized objects as well, but those don't
                hurt, do they?
                If path is absolute, then the url field for
                attachments is output as file:// URI, if it is
                relative, it is output as a relative URI (i.e. no
                file:// prefix).

    --max-thread-duration duration[1]
                When encountering emails with no or no known
                in-reply-to and references headers, group them into
                the same thread according to their subject line as
                long as the time span between the first mail of that
                subject and the last one doesn't exceed the given
                duration. Pass '0' to disable. Default: '$$config{max_thread_duration}'.

    --max-date-deviation duration[1]
                When mbox separators (lines starting with 'From ')
                contain time stamps, and those deviate more than
                <duration> from the Date header contained in the mail
                (of if there is no Date header in the mail), use the
                mbox time stamp instead. Default: off.  Note: mbox
                time stamps are not necessarily representing the time
                when an email was received, could also be when they
                were copied around.

   --filter-max-age duration[1]
                Only output messages which have a date/time more
                recent than the current time minus the given duration.
                When using this option, the in-reply-to fields, or the
                links in the generated pages with --html-to, can point
                to emails that are known but not written to the json
                stream or html-to directory.

    --jobs n
                use n instead of the default $$config{jobs}\[2] jobs in parallel

  [1] duration can be anything that Time::Duration::Parse supports,
      like '1 day' or '1d and 5h'; bare numbers are interpreted as
      seconds.

  [2] default number of jobs is derived from the number of cores on
      the machine the program is running on.

  (Option names can be shortened when given as command arguments (not
  when given in config files) as long as they are unambiguous and that
  you accept the risk for future ambiguity.)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Time::Duration::Parse;

use Chj::FP::HashSet ":all";

our @deidentify;
our @open_message_id;
our @open_identify;

use Getopt::Long;
use Hash::Util 'lock_hash';
our %opt;
GetOptions("verbose"=> \$opt{verbose},
	   "repl"=> \$opt{repl},
	   "help"=> sub{usage},
	   "cleanup"=> \$opt{cleanup},
	   "attachment-basedir=s"=> \$opt{attachment_basedir},
	   "mbox-glob=s"=> \$opt{mbox_glob},
	   "recurse"=> \$opt{recurse},
	   "config=s"=> sub {
	       my ($_,$path)=@_;
	       my $c= require $path;
	       ref ($c) eq "HASH"
		 or die "config file '$path' returned something other than a hash ref: $c";
	       $config= hashset_union ($c, $config);
	   },
	   "max-thread-duration=s"=> \$opt{max_thread_duration},
	   "max-date-deviation=s"=> \$opt{max_date_deviation},
	   "filter-max-age=s"=> \$opt{filter_max_age},
	   "json-to=s"=> \$opt{json_to},
	   "html-to=s"=> \$opt{html_to},
	   "html-index=s"=> \$opt{html_index},
	   "source-to=s"=> \$opt{source_to},
	   "deidentify=s"=> sub {
	       my ($_,$v)=@_;
	       push @deidentify, $v
	   },
	   "show-mbox-path=s"=> \$opt{show_mbox_path},
	   "open-message-id=s"=> sub {
	       my ($_,$v)=@_;
	       push @open_message_id, $v
	   },
	   "open-identify=s"=> sub {
	       my ($_,$v)=@_;
	       push @open_identify, $v
	   },
	   "jobs=i"=> \$opt{jobs},
	   #"dry-run"=> \$opt{dry},
	  ) or exit 1;

$opt{sourcepaths}= @ARGV ? [@ARGV] : undef;

*opt= hashset_union_defined(\%opt, $config);

$opt{max_date_deviation}&&= parse_duration $opt{max_date_deviation};
$opt{max_thread_duration}&&= parse_duration $opt{max_thread_duration};
$opt{filter_max_age}&&= parse_duration $opt{filter_max_age};

lock_hash %opt;

our $start_t= time;

sub have ($) {
    my ($v)=@_;
    defined $v and
      (ref($v) eq "ARRAY" ? @$v : 1)
}

usage unless
  (have $opt{sourcepaths} and ($opt{json_to} or $opt{html_to} or $opt{source_to}))
  or @deidentify or $opt{show_mbox_path} or $opt{repl}
  or ($opt{html_to} and @open_identify);
# XX should probably instead call usage if nothing was done at the end
# and/or where the data is missing.

use Chj::NoteWarn;
NoteWarn_attenuation_level($opt{verbose} ? 0 : 1);

use Chj::tempdir;

use Chj::xperlfunc ':all';

our $tmp= do {
    if ($opt{attachment_basedir}) {
	xmkdir $opt{attachment_basedir} if not -d $opt{attachment_basedir};
	$opt{attachment_basedir}
    } else {
	my $create= sub {
	    my $t= tempdir $tmpbase;
	    xsymlink $t, $tmplink;
	    $t
	};
	if (my $p= readlink( $tmplink)) {
	    if (my $s= Xstat $p) {
		if ($s->uid == $>) {
		    $p
		} else {
		    warn "directory pointed to by '$tmplink' ('$p') is owned by somebody else, creating a new one instead";
		    xunlink $tmplink;
		    &$create;
		}
	    } else {
		xunlink $tmplink;
		&$create;
	    }
	} else {
	    &$create;
	}
    }
};


sub print_deidentify {
    my ($str)=@_;
    my $m= Chj::Ml2json::Debug::deidentify($str,$tmp);
    print $m->ent->as_string
      or die $!;
}

if (@deidentify) {
    require Chj::Ml2json::Debug;
    print_deidentify $_
      for @deidentify;
    exit 0;
}

if ($opt{show_mbox_path}) {
    my ($md5)= $opt{show_mbox_path}=~ /\b([a-f0-9]{32})\b/
      or usage "does not contain an md5 hex string: '$opt{show_mbox_path}'";
    my $p="$tmp/$md5";
    my $mbox= Chj::Ml2json::Ghostable->load($p);
    if (my $path= $mbox->path) {
	print $path,"\n" or die $!;
    } else {
	die "The object stored at '$p' does not have path field, seems to have been generated before adding this feature; run --cleanup and run the conversion again";
    }
}

sub cleanup_tmp {
    if ($opt{attachment_basedir}) {
	my $p= $opt{attachment_basedir};
	system ("rm", "-rf", "--", $p)==0 or die "rm -rf '$p' failed";
    } else {
	# partially COPYPASTE..
	if (my $p= readlink( $tmplink)) {
	    if (my $s= Xstat $p) {
		if ($s->uid == $>) {
		    $p=~ m|^/| or die "not an absolute target location: '$p'";
		    unlink $tmplink;
		    system ("rm", "-rf", "--", $p)==0 or die "rm -rf '$p' failed";
		} else {
		    warn "directory pointed to by '$tmplink' ('$p') is owned by somebody else";
		}
	    } else {
		xunlink $tmplink;
	    }
	}
    }
}

use Chj::Ml2json::MailcollectionParser;
use Chj::Ml2json::Message;
use Chj::FP2::Stream ':all';
use Chj::Ml2json::OutputJSON;
use Chj::Ml2json::OutputJSON::Continuous;
use Chj::Try;
use Chj::xopen ':all';
use Chj::Ml2json::Parse::HTML;
use Chj::xperlfunc ':all';
use Chj::Parallel;
use Chj::PClosure;
use Chj::Browser;
use Chj::chompspace;
use Chj::Ml2json::Parse::TextStripper;
use Chj::Ml2json::Ghosts; # Chj::Ml2json::Ghostable, Chj::Ml2json::Ghost
use Chj::xIO qw(xputfile_utf8 xcopyfile_utf8);
use Chj::FP::Div "identity";
use Chj::FP::url_;
use Chj::FP::OrderedCollection;
use Chj::Ml2json::l10n;
use Chj::Ml2json::Svginfo;
use Chj::FP2::List qw(array2list car cdr);


use DateTime;
# XX move lib
sub verbose_time_zone ($) {
    my ($time_zone)=@_;
    my $dt= DateTime->from_epoch(epoch=> 0);
    $dt->set_time_zone($time_zone);
    my $tzshort= $dt->time_zone_short_name;
    my $tzlong= $dt->time_zone_long_name;
    ($tzshort eq $tzlong) ? $tzshort : "$tzshort ($tzlong)"
}

# XX move lib
sub defined_and_length ($) {
    defined $_[0] and length $_[0]
}


$Chj::Ml2json::MIMEExtract::good_words= # XX hacky way to set
  do {
      my $f= xopen_read $opt{good_words_path};
      binmode $f, ":encoding(utf-8)" or die;
      my %w;
      while (<$f>) {
	  $_= chompspace $_;
	  next if /^#/;
	  next unless length $_;
	  $w{$_}=1;
      }
      $f->xclose;
      \%w
  };

if (defined $opt{cache_dir}) {
    mkdir $opt{cache_dir};
    $Chj::Ml2json::Ghosts::maybe_cache_dir= $opt{cache_dir};
    # XX hacky dito
}

sub idf2flat_path ($$) {
    my ($idf,$maybe_dir)=@_;
    $idf->flat_path($maybe_dir, ".xhtml")
}

sub m2xhtml_basename {
    my ($m)=@_;
    idf2flat_path ($m->identification, undef)
}

sub id2xhtml_basename ($$) {
    my ($index, $id)=@_;
    # XX should provide a method
    my $t_mg= $$index{ids}{$id}
      or die "unknown message id '$id'";
    my ($t,$mg)=@$t_mg;
    # /method
    m2xhtml_basename($mg->resurrect)
	# ^ XX wrong for cross-mailbox links?
}

sub m2xhtml_path {
    my ($m)=@_;
    idf2flat_path ($m->identification, $opt{html_to})
}

# for parsing from (user-given) string
sub identify2xhtml_path {
    my ($identify)=@_;
    my $idf= Chj::Ml2json::Mailcollection::Message::Identify->
	new_from_string ($identify);
    idf2flat_path ($idf, $opt{html_to})
}


our $parallel= Chj::Parallel->new($opt{jobs});


our $collectionparser= Chj::Ml2json::MailcollectionParser->new
  ('Chj::Ml2json::Message',
   $opt{mbox_glob},
   $opt{recurse},
   $opt{mailbox_path_hash});


## config file input ?
our $htmlmapper= Chj::Ml2json::Parse::HTML->new_
  (content_subtype=> "html",
   do_paragraphy=> $opt{do_paragraphy},
   do_newline2br=> $opt{do_newline2br},
   opt=> \%opt, # yes, joke, see comment at $outputjson
  );
our $enrichedmapper= Chj::Ml2json::Parse::HTML->new_
  (content_subtype=> "enriched",
   do_paragraphy=> 1,
   do_newline2br=> 0,
   opt=> \%opt, # yes, joke, see comment at $outputjson
  );

our $textstripper= Chj::Ml2json::Parse::TextStripper->new
  ($opt{strip_text});

our $outputjson= Chj::Ml2json::OutputJSON->new
  ($opt{jsonfields_orig_headers},
   $opt{jsonfields_top},
   $htmlmapper,
   $enrichedmapper,
   $textstripper,
   "Chj::Ml2json::Parse::HTML",
   $opt{do_confirm_html},
   $tmp,
   \%opt # for possibly_url2html and pendant for HTML (yes, kinda joke
	 # considering that other keys are passed separately above)
  );

use Chj::PXML::Serialize 'puthtmlfile';
use Chj::PXHTML ':all';
sub with_wrap_if (&$$){
    my ($fn,$val,$cond)=@_;
    $cond ? do{ local $_= $val; &$fn($val)} : $val
}
use Scalar::Util 'weaken';
use Chj::FP::ArrayUtil ':all';
sub nobr {
    SPAN({style=> "white-space:nowrap;"}, @_)
}
use Chj::Ml2json::Color;
our $textbackgroundcol= Chj::Ml2json::Color->new_htmlstring("#e0f0ff");
our $blockquoteendcol= Chj::Ml2json::Color->new_htmlstring("#ffffff");
sub phrase_dequote {
    my ($maybe_str)=@_;
    $maybe_str and do {
	my $str= $maybe_str;
	$str=~ s/^\s*\"//s;
 	$str=~ s/\"\s*\z//s;
	$str
    }
}
sub phrase_deparentisize {
    my ($maybe_str)=@_;
    $maybe_str and do {
	my $str= $maybe_str;
	$str=~ s/^\s*\(//s;
 	$str=~ s/\)\s*\z//s;
	$str
    }
}

sub css_link ($) {
    my ($urlstring)=@_;
    LINK ({rel=> "stylesheet",
	   type=> "text/css",
	   href=> $urlstring });
}

our $css_code=
    [
     (map {
	 my $col= $textbackgroundcol->shade_exponentially_towards
	     ($blockquoteendcol, 0.6, $_)->htmlstring;
	 ".quotelevel_$_ { background-color:$col; }\n"
      } 1..15),
     chompspace "
a {
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
.ref_precise {list-style: disc; }
.ref_subject {list-style: square; }
dir.top {
    margin-top: 1em;
    margin-bottom: 1em;
}
dir.reply {
    margin-top: 0.2em;
    margin-bottom: 0.2em;
}
div.arrows {
    position: fixed;
    top: 75px;
    left: 10px;
    font-size: 25px;
    font-family: sans-serif;
}
div.arrows > a:hover {
  text-decoration: none;
}
table.after_arrows {
    position: relative;
    left: 65px;
    width: 83%;
}
.inactive_arrow {
    color: #ccc;
}
.avatar {
    float: right;
    margin-top: -16px;
    margin-right: -16px;
    margin-bottom: -16px;
    margin-left: 12px;
}
.fieldkey {
    float: right;
    font-family: sans-serif;
}
.threaditem_active {
    background-color: #ddf;
}

/* opt{css_addition} */
$opt{css_addition}
"];

# These locations are relative from $opt{html_to} in the filesystem,
# and directly used as relative url in the html pages that are saved
# there.
our $css_url= "ml2json.css";
our $svg_url_base= "";
# (^ used simply as a string prefix; see "XX bad usage" below)


our $icons=
    [
     # $name, $alt, $maybe_title, $maybe_scale
     # (most are wrapped with a SPAN with title, so don't have it here)
     ["up_inactive", ""],
     ["up", "^"],
     ["doubleup", "^^"],
     ["down", "v"],
     ["down_inactive", ""],
     ["left", "<"],
     ["paper-clip", sub {__"(attachments)"}, sub{__"has attachments"}, 0.8],
     # ^ delay __ until $l10n_lang is set (will be called in PXML
     # serializer)
    ];
our $iconnames= array_map sub{$_[0][0]}, $icons;
sub mkimg {
    my ($name, $alt, $maybe_title, $maybe_scale)=@_;
    my $filename= "$name.svg";
    my $info= Chj::Ml2json::Svginfo->new_from_path ("icons/$filename");
    # XX eliminate alt since indexlink adds a title to the A element, too?
    IMG {src=> "$svg_url_base$filename", alt=> $alt,
	 (map {
	     my $v= $info->$_;
	     ($_=> defined ($maybe_scale) ? $maybe_scale * $v : $v)
	  } qw(width height)),
	 $maybe_title ? (title=> $maybe_title) : ()}
}
our %iconshtml= map {
    ($$_[0], mkimg @$_)
} @$icons;


# embedded SVG so that we can use links without having to use img
# rectangles as boundaries:

use Chj::PSVG 'svg';

sub svg_path ($$;$) {
    my ($maybe_url, $d, $maybe_title)=@_;
    my $content=
	Chj::PSVG::PATH({d=> $d,
			 (defined $maybe_title ? (title=> $maybe_title) : ()),
			 stroke=> "white",
			 "stroke-width"=> "1.5",
			 fill=> defined $maybe_url ? "black" : "#aaa"});
    defined $maybe_url ?
	Chj::PSVG::A({'xlink:href'=> $maybe_url}, $content)
	: $content
}

sub nav_svg {
    @_==4 or die;
    my ($upurl, $downurl, $righturl, $lefturl)=@_;
    (svg
     {height=> "84", width=> "52"},
     svg_path ($upurl,
	       "M 26.3113,27.2246 35.7976,31.154 26,1 16.2024,31.154 z",
	       __"earlier reply to the same message"),
     svg_path ($downurl,
	       "M 25.6887,56.2206 16.2024,52.2912 26,82.4452 35.7976,52.2912 z",
	       __"later reply to the same message"),
     svg_path ($righturl,
	       "M 30.2527,43.8454 22.4683,51.6297 51,52.0779 30.5081,32.2199 z",
	       __"first reply to this message"),
     svg_path ($lefturl,
	       "M 21.7473,39.5998 29.5317,31.8155 1,31.3673 21.4919,51.2253 z",
	       __"original message"))
}


our ($json, $index);

sub id2maybe_mg {
    my ($id)=@_;
    if (my $v= $index->ids->{$id}) {
	$$v[1]
    } else {
	()
    }
}

# fromstr: address to shortish string for window titles and showthread
# (don't use email part unless it's the only part)

sub fromstr ($) {
    my ($from)=@_;
    ($opt{map_mail_address_maybe_fullname}->($$from{address})
     // (phrase_dequote($$from{phrase})
	 || phrase_deparentisize($$from{comment})
	 || $opt{map_mail_address}->($$from{address})))
}

# addr2html: address to html for From and To/Cc fields

sub addr2html_nofullnamemapping {
    my ($addr)=@_;
    my $phrasepart=
	(defined_and_length $$addr{phrase}
	 and
	 phrase_dequote($$addr{phrase}) ne $$addr{address})
	? phrase_dequote($$addr{phrase})." "
	: undef;
    my $commentpart=
	(defined_and_length $$addr{comment}
	 ? " ".phrase_deparentisize($$addr{comment})." "
	 : undef);
    my $link=
	$opt{link_mail_address}->($$addr{address});
    ((!defined $phrasepart
      and !defined $commentpart) ?
     TT($link)
     :
     # use SPAN instead of just an array so that the ->text call in
     # addr2html succeeds
     SPAN($phrasepart,
	  TT("<", $link, ">"),
	  $commentpart))
}

sub addr2html {
    my ($addr)=@_;
    if ($opt{map_fullname_addressfieldsP}) {
	if (defined (my $fullname=
		     $opt{map_mail_address_maybe_fullname}
		     ->($$addr{address}))) {
	    # Use the original fullname and address as popup string
	    # (unlinked); but still link $fullname.

	    # Wrap with SPAN instead of modifying A since
	    # link_mail_address is not obliged to return an A element.
	    SPAN({title=> addr2html_nofullnamemapping($addr)->text},
		 $opt{link_mail_address}->($$addr{address}, $fullname))
	} else {
	    addr2html_nofullnamemapping $addr
	}
    } else {
	addr2html_nofullnamemapping $addr
    }
}


# id -> thread-datastructure -> HTML
sub id_showthread {
    my ($maybe_selected_id)=@_;
    my $showthread; $showthread= sub {
	my ($subthread, $maybe_prev_searedsubject)=@_;
	my $_id= $$subthread{id};
	if (my $mg= id2maybe_mg ($_id)) {
	    my $m= $mg->resurrect;
	    my $url= m2xhtml_basename($m);

	    my ($from)= @{$outputjson->json_parsed_from($m,undef)};
	    my $fromstr= fromstr($from);

	    my $maybe_date= $opt{archive_date_thread}->
	      ($m->header_hashref_lc->{date},
	       $m->unixtime);
	    my $searedsubject= $outputjson->json_seared_subject($m,undef);

	    my $content = do {
		my $datecontent= $maybe_date && [", ", $maybe_date];
		my $attachments= $outputjson->json_attachments($m,undef);
		my $maybe_clip= @$attachments ?
		    [" ", $iconshtml{"paper-clip"}] : undef;
		if (defined $maybe_prev_searedsubject
		    and $maybe_prev_searedsubject eq $searedsubject) {
		    [ I($fromstr), $datecontent, $maybe_clip ]
		}
		else {
		    my $subject= $outputjson->json_decoded_subject($m,undef);
		    [ B($subject), ", ",
		      I($fromstr), $datecontent, $maybe_clip ]
		}
	    };

	    my $is_active= (defined $maybe_selected_id
			    and $_id eq $maybe_selected_id);

	    my $possiblylinkedcont=
	      ($is_active ?
	       $content
	       : A({href=> $url,
		    (!defined $maybe_selected_id and $opt{html_add_arrows}) ?
			(name=> $_id)
			: ()},
		   $content));

	    DIR({compact=>1,
		 class=> (defined $maybe_prev_searedsubject ? "reply" : "top")},
		LI({class=> "ref_$$subthread{ref}".
			($is_active ? " threaditem_active" : "")},
		   $possiblylinkedcont),
		array_map(sub {
			      @_=(@_,$searedsubject); goto $showthread
			  }, $$subthread{replies}))
	} else {
	    WARN "shouldn't happen here?: id '$_id'";
	    undef
	}
    };
    my $_showthread= $showthread; weaken $showthread;
    $showthread
}


# Get flat list of all ids in a thread.
# XX: is this the same as Chj::Ml2json::MailcollectionIndex's expandthread ?

# thread -> id...
sub thread_messageids {
    my ($th)=@_;
    ($$th{id},
     map { thread_messageids ($_) } @{$$th{replies}})
}


# Search a message id in a thread, return [prev, next, firstreply, parent] ids
# for the navigation.

# thread, id, maybe id, maybe id, list-of thread ->
#     maybe [maybe id, maybe id, maybe id, maybe id]
sub thread_id_navids {
    my ($th, $id, $maybe_up_id, $maybe_prev_id, $maybe_rest)= @_;
    if ($$th{id} eq $id) {
	# found
	my $maybe_first_reply= $$th{replies}[0];
	[ $maybe_prev_id,
	  $maybe_rest ? car ($maybe_rest)->{id} : undef,
	  $maybe_first_reply ? $$maybe_first_reply{id} : undef,
	  $maybe_up_id,
	]
    } else {
	(($maybe_rest and
	  # search in rest of current level
	  thread_id_navids (car $maybe_rest,
			    $id,
			    $maybe_up_id, # up
			    $$th{id}, # prev
			    cdr $maybe_rest))
	 or do {
	     # search in deeper level (replies of $th)
	     if (my $l= array2list $$th{replies}) {
		 thread_id_navids (car $l,
				   $id,
				   $$th{id}, # up
				   undef, # prev
				   cdr $l);
	     } else {
		 # not found
		 undef
	     }
	 })
    }
}


sub indexlink {
    my ($title, $body, $body_inactive, $maybe_url)=@_;
    defined $maybe_url ?
	A({href=> $maybe_url,
	   title=> $title}, $body)
	:
	SPAN ({class=> "inactive_arrow"}, $body_inactive);
}

# index -> id -> HTML -> HTML
sub make_html_arrows_for {
    my ($index)=@_;

    # Flattened view (but grouped by thread) of all messages for
    # 'previous message' and 'next message' links
    my $ordered= Chj::FP::OrderedCollection->new_from_values
	(map {
	   my ($id)=$_;
	   my $th= $index->thread($id);
	   $$th{id} eq $id or die;
	   thread_messageids($th)
	 } @{$index->all_threadleaders_sorted});

    sub {
	my ($id)=@_;
	sub {
	    my ($content)=@_;
	    my $arrowlink= sub {
		my ($title, $body, $body_inactive, $maybe_id)=@_;
		my $maybe_url= defined $maybe_id ?
		    id2xhtml_basename($index, $maybe_id)
		    : undef;
		indexlink ($title,$body,$body_inactive, $maybe_url)
	    };
	    my $navids= thread_id_navids ($index->wholethread($id), $id)
		or die "bug: id '$id' not found in its wholethread";
	    [
	     DIV({class=> "arrows"},
		 &$arrowlink (__"previous message",
			      $iconshtml{up},
			      $iconshtml{up_inactive},
			      $ordered->maybe_prev($id)),BR,
		 indexlink (__"message list",
			    $iconshtml{left},
			    undef, # never used
			    url_(path=> "index.xhtml", fragment=> $id)), BR,
		 &$arrowlink (__"next message",
			      $iconshtml{down},
			      $iconshtml{down_inactive},
			      $ordered->maybe_next($id)),
		 BR, BR,
		 nav_svg (map { defined $_ ? id2xhtml_basename($index, $_) : undef }
			  @$navids)
	     ),
	     $content
	    ]
	}
    }
}

# (ugly? Want to generate it only once, that's why not defined in do_output_message)
our $html_arrows_for;

sub do_output_message {
    my ($m,$pos)=@_;
    Try {
	if ($opt{json_to}) {
	    $json->set_not_first(1)
	      if ($opt{jobs} > 1 and $pos > 0);
	    $json->message_print($m,$index);
	}

	my $identify= $m->identify;
	my $source_path;
	if ($opt{source_to}) {
	    # HACKY, using slash in $identify, but relying on
	    # guarantee that it can only contain one slash and is safe
	    # to use that way
	    my $path= $m->identification->deep_path
	      ($opt{source_to}, ".txt");
	    mkdir dirname($path);
	    my $out= xopen_write $path;
	    # Choice of either deparsing the entity, which is
	    # not the same as what was originally parsed (but
	    # it would show what was lost in the MIME parser)
	    if (0) {
		$out->xprint($m->ent->as_string);
	    } else {
		# or re-read the slice of the original mbox
		# file; XX assumes that the file is still
		# unchanged!
		$m->mailboxcursor->xsendfile_to($out);
	    }
	    $out->xclose;
	    $source_path= $path;
	}
	if ($opt{html_to}) {
	    my $id= $m->id;
	    my $path= m2xhtml_path ($m);
	    # iceweasel ignores encoding in .html files, thus
	    # needs to be .xhtml suffix
	    my $fragment= $outputjson->html($m);
	    my $header_hashref_lc= $m->header_hashref_lc;
	    my $ctime_UTC= $outputjson->json_ctime_UTC($m,$index);
	    my $attachments= $outputjson->json_attachments($m,$index);
	    my $subject= $outputjson->json_decoded_subject($m,$index);
	    my $inreplyto= $outputjson->json_in_reply_to ($m,$index);
	    my $replies= $outputjson->json_replies($m,$index);
	    my $threadleaders= $outputjson->json_threadleaders($m,$index);
	    my $maybe_threadleader=
	      (@$threadleaders == 1) ? $$threadleaders[0] : undef;
	    my $threadparents= $outputjson->json_threadparents($m,$index);
	    my $maybe_threadparent=
	      (@$threadparents == 1) ? $$threadparents[0] : undef;
	    my $msg_id2maybe_url= sub {
		my ($id)=@_;
		if (my $mg= id2maybe_mg ($id)) {
		    my $m= $mg->resurrect; # necessary as $mg->identify is different
		    m2xhtml_basename($m);
		} else {
		    undef
		}
	    };
	    my @choice= $m->origplain_origrich_orightml_string ($opt{do_confirm_html});
	    my $choice= array_zip2 \@choice, [qw(plain rich html)];
	    my $choosen= $outputjson->html_choice($m);


	    my $perhaps_source_link= $source_path && do {
		my $rel= File::Spec->abs2rel($source_path, dirname($path));
		["; ", A({href=> $rel}, "source")]
	    };

	    my %addrs=
	      map {
		  my $vs= $outputjson->_json_mailparsed_header($m,$_);
		  ($_=> do {
		      if (@$vs) {
			  array_join (array_map (\&addr2html,$vs), ", ")
		      } else {
			  undef
		      }
		  })
	      } qw(from to cc);
	    my $from= $outputjson->_json_mailparsed_header($m,"from")->[0];
	    my $fromstr= fromstr ($from);

	    my $perhaps_arrows=
		$opt{html_add_arrows} ?
		&$html_arrows_for ($id)
		: \&identity;

	    my $page=
	      HTML
		($opt{archive_message_change}->
		 (HEAD (TITLE ($opt{archive_message_title}->
			       ($identify, $subject, $fromstr)),
			css_link $css_url),
		  BODY
		  (($opt{archive} ? {} : {bgcolor=>"#964a2a"}),
		   &$perhaps_arrows
		   (TABLE ({border=>0,
			    cellspacing=>3,
			    cellpadding=>16,
			    ($opt{html_add_arrows} ?
			     (class=> "after_arrows")
			     : (width=>"88%",
				align=>"center")),
			   },
			  TR
			  (TD
			   ({colspan=>2,
			     bgcolor=> "#f0f8ff"},

			    $opt{map_mail_address_maybe_avatar}->($$from{address}),
			    
			    TABLE
			    ({border=>0},
			     (
			      map {
				  @$_==2 or die;
				  my ($key,$val)=@$_;
				  TR ({valign=>"top"},
				      TD ({class=> "fieldkey"},
					  "$key:$nbsp"),
				      TD ($val))
			      }
			      [__"Subject",
			       #with_wrap_if {
			       #	  A({href=> &$msg_id2url ($maybe_threadleader)}, $_)
			       #} B($$orig_headers{Subject}), $maybe_threadleader
			       #sigh, more complicated (maybe monad?):
			       do {
				   my $V0= B($subject);
				   if ($maybe_threadparent) {
				       if (my $V2= &$msg_id2maybe_url ($maybe_threadparent)) {
					   A({href=> $V2,
					      title=> __"original message"},
					     $V0)
				       } else {
					   $V0
				       }
				   } else {
				       $V0
				   }
			       }
			      ],
			      [__"From", #$$header_hashref_lc{from}
			       $addrs{from}],
			      [__"To/Cc",# $$header_hashref_lc{to},
			       [$addrs{to},
				($addrs{cc} and [", ",$addrs{cc}])]],
			      [__"Date",
			       $opt{archive_date_message}->
			       ($$header_hashref_lc{date},
				$ctime_UTC,
				$m->unixtime)]
			     ),
			     ($opt{show_messageid_and_source}->()
			      ? TR({valign=>"top"},
				   TD(SMALL("Message-ID:")),
				   TD(SMALL($id,
					    " $nbsp ",
					    nobr
					    ("Choice:",
					     (map {
						 my ($used,$msg)=@$_;
						 ($used
						  ? [" ",
						     ($choosen eq $msg ? B($msg) : $msg)]
						  : undef)
					     } @$choice),
					     $perhaps_source_link))))
			     : undef)))),
			  TR (TD ({colspan=>2,
				   bgcolor=> $textbackgroundcol->htmlstring},
				  $fragment)),
			  (@$attachments
			   ? (map {
			       my $att=$_;
			       my $attpath= $$att{path};
			       my $loc=
				 File::Spec->abs2rel($attpath, dirname($path));
			       my $name= basename($attpath);
			       my $formatleft=
				 +{ bgcolor=> $textbackgroundcol->htmlstring,
				    valign=>"top",
				    align=> "right"};
			       my $formatright=
				 +{ bgcolor=> $textbackgroundcol->htmlstring,
				    valign=>"top",
				    align=> "left"};
			       if ($$att{disposition} eq "inline"
				   and
				   $$att{content_type} =~ /^image/) {
				   TR(TD($formatleft,
					 "Image ($$att{content_type}): ", BR,
					 $name),
				      TD($formatright,
					 IMG ({src=> $loc,
					       title=> $name})))
			       } else {
				   TR(TD($formatleft,
					 "Attachment ($$att{content_type}): "),
				      TD($formatright,
					 A ({href=> $loc}, $name)))
			       }
			   } @$attachments)
			   :()),
			  TR (TD ({colspan=>2,
				   bgcolor=> "#f0f8ff"},
				  ($maybe_threadleader and
				   id_showthread($id)
				   ->($index->thread($maybe_threadleader)))))))),
		  $m));
	    puthtmlfile($path, $page, $l10n_lang);
	}
    } $m;
}

sub parse_and_convert {
    my $coll= $collectionparser->parse_trees
      ($opt{sourcepaths}, $tmp, $opt{max_date_deviation});

    local $index= $coll->index ($opt{max_thread_duration});
    local $html_arrows_for= make_html_arrows_for($index)
	if ($opt{html_add_arrows} and $opt{html_to});

    if ($opt{repl}) {
	Chj::repl::repl();
	exit;
    }
    if (@open_message_id or @open_identify) {
	my $idf=
	  [
	   (map {
	       my $id= $$index{messageids}{$_} || $_;
	       my $t_mg= $$index{ids}{$id}
		 or die "unknown message id '$id'";
	       my ($t,$mg)=@$t_mg;
	       $mg->resurrect->identify # XXX use identification instead (object), need a different _uniq then
	   } @open_message_id),
	   (map {
	       m{\b([a-f0-9]{32}[/-]\d+)\b}
		 or die "could not find identify string in '$_'";
	       my $str= $1;
	       $str=~ s|-|/|;
	       $str
	   } @open_identify)
	  ];
	Browser_exec map {
	    my $p=identify2xhtml_path($_);
	    #my $absp= $p=~ m|^/| ? $p : $ENV{PWD}."/".$p;
	    my $absp= abs_path $p;
	    "file://$absp"
	} @{array_hashing_uniq $idf};
    }

    if ($opt{html_to} and not -d $opt{html_to}) {
	xmkdir $opt{html_to}
    }
    if ($opt{source_to} and not -d $opt{source_to}) {
	xmkdir $opt{source_to}
    }
    my $allout= sub {
	my $o;
	if ($opt{json_to}) {
	    $o= xopen_write $opt{json_to};
	    binmode $o, ":utf8" or die;
	}
	local $json= Chj::Ml2json::OutputJSON::Continuous->new($o,$outputjson);
	#^ XX HACK: $o may be undefined; really misusing that
	# mechanism now.
	if ($opt{json_to}) {
	    $json->print_opening;
	}

	my $par1_tmpdir= tempdir "/tmp/$myname-par1";##XXX
	# Instead of passing context through the PClosure, instantiate
	# after having put the nonserializable/big parts into dynamic
	# variables ($json, $index).
	my $par1= $parallel->instantiate ($par1_tmpdir, [$o ? $o : ()]);

	my $filter_max_age= sub {
	    my ($msgs)=@_;
	    undef $_[0];
	    if (my $td= $opt{filter_max_age}) {
		my $cutoff_t = $start_t - $td;
		stream_filter (sub {
				   local our ($m)=@_;
				   $m->unixtime > $cutoff_t
			       }, $msgs);
	    } else {
		$msgs
	    }
	};

	if ($opt{html_to}) {
	    # generate the CSS page used by the HTML pages
	    xputfile_utf8 "$opt{html_to}/$css_url", $css_code;
	    # and the SVG files
	    for my $name (@$iconnames) {
		my $filename= "$name.svg";
		# XX bad usage of $svg_url_base, should really use path ops.
		xcopyfile_utf8 "icons/$filename", "$opt{html_to}/$svg_url_base$filename";
	    }
	}

	if ($opt{html_index}) {
	    # (XX parallelize how? par stream_map wanted, then do it in do_output_message ?)
	    my $showthread= id_showthread(undef);
	    my $threadleader_ids= array2stream $index->all_threadleaders_sorted;
	    my $threadleaders= stream_map $index->id2m, $threadleader_ids;
	    $threadleaders= &$filter_max_age ($threadleaders); # XXX is this precise enough (cutoff point vs files)?
	    my $indexpage=
	      HTML
		($opt{archive_threadindex_change}->
		 (HEAD (TITLE ($opt{archive_threadindex_title}->()),
			css_link $css_url),
		  BODY
		  (($opt{archive} ? {} : {bgcolor=>"#e0e0e0"}),
		   $opt{time_zone_notice}->(0),
		   (stream_map sub {
			my ($threadleader)=@_;
			&$showthread($index->thread($threadleader->id))
			  # XX stupid. id to m to id; would even have t intermediately for the filter_max_age.
		    }, $threadleaders),
		   $opt{time_zone_notice}->(1))));
	    puthtmlfile ($opt{html_index}, $indexpage);
	}

	my $msgs = $index->all_messages_threadsorted;
	$msgs= &$filter_max_age($msgs);

	my $len= $par1->stream_for_each(PClosure(*do_output_message), $msgs, 20);

	if ($opt{json_to}) {
	    #$json->set_not_first($len);
	    $json->end;
	    $o->xclose;
	}

	$par1->close;
	rmdir $par1_tmpdir or warn "could not remove '$par1_tmpdir': $!";
    };

    &$allout;
}

use Chj::Backtrace;
$SIG{INT}= sub {
    use Carp 'cluck';
    cluck "got SIGINT";
    exit 1;
};


if ($opt{repl}) {
    import Chj::Ml2json::MIMEExtract ':all';
    require Chj::Ml2json::Debug;
    import Chj::Ml2json::Debug;
    require Chj::repl;
    Chj::repl::repl() unless have $opt{sourcepaths};
}

if ($opt{cleanup}) {
    cleanup_tmp();
    exit 0;
}

local $l10n_lang= $opt{lang};

parse_and_convert if (have $opt{sourcepaths} or @open_identify);

