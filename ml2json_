#!/usr/bin/perl -w

# Thu Jul  4 21:30:42 BST 2013
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

use Cwd 'abs_path';

our ($mydir, $myname);
BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
    $mydir= $ENV{ML2JSON_MYDIR} if $ENV{ML2JSON_MYDIR};
}
use lib "$mydir/perllib";
use lib "$mydir/ftemplate/lib";
use lib "$mydir/lib";

our $tmpbase="/tmp/$myname";
our $tmplink= "$ENV{HOME}/.$myname-tmp"; ## ok to use that path?
our $default_config_path= "$mydir/default_config.pl";
our $config= require $default_config_path;

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname sourcedir-or-file(s) [--json-to targetfile]

  sourcedir should be a directory with *.mbox files directly in it
  (but see --recurse).  If a file is given instead, it is assumed to
  be an mbox file.  Paths to maildirs (with cur and new
  subdirectories) or ezmlm archive directories are auto-detected and
  treated accordingly.

  All options and actions except for --deidentify, --open-message-id
  and --open-identify (and --help and --config) can alternatively be
  configured from a config file, see --config. Command line options
  have precedence. Sourcepath(s) can be configured as a 'sourcepaths'
  config key holding an array. Some options can *only* be configured
  in the config file.

  Sourcepaths can be files ending in .gz or .bz2, in which case they
  are uncompressed on the fly. (Note that this leads to different
  identify values, though.)

  The --json-to, --html-to and --source-to actions can be combined in
  the same run.


  Actions:

    --json-to file
                where the JSON output should go (use '-' for stdout).

    --html-to dir
                create html files in the specified directory
                (currently meant for debugging only)

    --html-index file
                create html file with thread 'index'; --html-to should
                be given, too, so that the link targets (currently
                assumed to be in the same directory) are available

    --source-to dir
                create files <dir>/<md5hash>/<number>.txt (where
                <md5hash>/<number> is the same string that
                --deidentify takes) and link them in the html files
                produced with --html-to

    --open-message-id message-id
                run \$BROWSER on the given message that was written
                before using --html-to. Needs html-to option again to
                know where the files are, but doesn't regenerare files
                nor does it run json generation.

    --open-identify identifystring
                run \$BROWSER on the given message that was written
                before using --html-to. Needs html-to option again to
                know where the files are, but doesn't regenerare files
                nor does it run json generation.

    --deidentify string
                print message identified by the given string, which is
                output into the JSON by the json_identify method (as
                'identify' field by default) or printed along with
                WARN and ERROR messages.
                Only works if the generated files are still available.
                If --attachment-basedir was given before, it has to
                be specified for --deidentify as well.

    --show-mbox-path md5hexstring[/number]
                show path of original mbox file for a given mbox
                identifier (as they are used in identify strings).

    --cleanup   delete currently used temp directory at $tmpbase*


  Options:

    --config myconfig.pl
                load given file containing perl code, which must end
                with a perl hashref; see default configuration in
                '$default_config_path'
                for the options that can be set that way.  Several
                --config options can be given, each subsequent one
                overrides options loaded from the previous ones (with
                regards to the keys of the top level hash ref). The
                previously loaded config can be accessed from
                \$main::config.  Keys in the config file use
                underscore to separate words, not '-'.

    --verbose   show NOTEs in addition to WARNings on stderr

    --recurse   recurse into subdirectories of sourcedir-or-file

    --mbox-glob globstring
                glob to use to find files in directories that contain
                mboxes. Defaults to '$$config{mbox_glob}'.


    --attachment-basedir path
                use path instead of a random subdirectory below
                '$tmpbase' for the output; the output currently
                contains serialized objects as well, but those don't
                hurt, do they?
                If path is absolute, then the url field for
                attachments is output as file:// URI, if it is
                relative, it is output as a relative URI (i.e. no
                file:// prefix).

    --max-thread-duration duration[1]
                When encountering emails with no or no known
                in-reply-to and references headers, group them into
                the same thread according to their subject line as
                long as the time span between the first mail of that
                subject and the last one doesn't exceed the given
                duration. Pass '0' to disable. Default: '$$config{max_thread_duration}'.

    --max-date-deviation duration[1]
                When mbox separators (lines starting with 'From ')
                contain time stamps, and those deviate more than
                <duration> from the Date header contained in the mail
                (of if there is no Date header in the mail), use the
                mbox time stamp instead. Default: off.  Note: mbox
                time stamps are not necessarily representing the time
                when an email was received, could also be when they
                were copied around.

   --filter-max-age duration[1]
                Only output messages which have a date/time more
                recent than the current time minus the given duration.
                When using this option, the in-reply-to fields, or the
                links in the generated pages with --html-to, can point
                to emails that are known but not written to the json
                stream or html-to directory.

    --jobs n
                use n instead of the default $$config{jobs}\[2] jobs in parallel

  [1] duration can be anything that Time::Duration::Parse supports,
      like '1 day' or '1d and 5h'; bare numbers are interpreted as
      seconds.

  [2] default number of jobs is derived from the number of cores on
      the machine the program is running on.

  (Option names can be shortened when given as command arguments (not
  when given in config files) as long as they are unambiguous and that
  you accept the risk for future ambiguity.)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Time::Duration::Parse;

use Chj::FP::HashSet ":all";

our @deidentify;
our @open_message_id;
our @open_identify;

use Getopt::Long;
use Hash::Util 'lock_hash';
our %opt;
GetOptions("verbose"=> \$opt{verbose},
	   "repl"=> \$opt{repl},
	   "help"=> sub{usage},
	   "cleanup"=> \$opt{cleanup},
	   "attachment-basedir=s"=> \$opt{attachment_basedir},
	   "mbox-glob=s"=> \$opt{mbox_glob},
	   "recurse"=> \$opt{recurse},
	   "config=s"=> sub {
	       my ($_,$path)=@_;
	       my $c= require $path;
	       ref ($c) eq "HASH"
		 or die "config file '$path' returned something other than a hash ref: $c";
	       $config= hashset_union ($c, $config);
	   },
	   "max-thread-duration=s"=> \$opt{max_thread_duration},
	   "max-date-deviation=s"=> \$opt{max_date_deviation},
	   "filter-max-age=s"=> \$opt{filter_max_age},
	   "json-to=s"=> \$opt{json_to},
	   "html-to=s"=> \$opt{html_to},
	   "html-index=s"=> \$opt{html_index},
	   "source-to=s"=> \$opt{source_to},
	   "deidentify=s"=> sub {
	       my ($_,$v)=@_;
	       push @deidentify, $v
	   },
	   "show-mbox-path=s"=> \$opt{show_mbox_path},
	   "open-message-id=s"=> sub {
	       my ($_,$v)=@_;
	       push @open_message_id, $v
	   },
	   "open-identify=s"=> sub {
	       my ($_,$v)=@_;
	       push @open_identify, $v
	   },
	   "jobs=i"=> \$opt{jobs},
	   #"dry-run"=> \$opt{dry},
	  ) or exit 1;

$opt{sourcepaths}= @ARGV ? [@ARGV] : undef;

*opt= hashset_union_defined(\%opt, $config);

$opt{max_date_deviation}&&= parse_duration $opt{max_date_deviation};
$opt{max_thread_duration}&&= parse_duration $opt{max_thread_duration};
$opt{filter_max_age}&&= parse_duration $opt{filter_max_age};

lock_hash %opt;

our $start_t= time;

sub have ($) {
    my ($v)=@_;
    defined $v and
      (ref($v) eq "ARRAY" ? @$v : 1)
}

usage unless
  (have $opt{sourcepaths} and ($opt{json_to} or $opt{html_to} or $opt{source_to}))
  or @deidentify or $opt{show_mbox_path} or $opt{repl}
  or ($opt{html_to} and @open_identify);
# XX should probably instead call usage if nothing was done at the end
# and/or where the data is missing.

use Chj::NoteWarn;
NoteWarn_attenuation_level($opt{verbose} ? 0 : 1);

use Chj::tempdir;

use Chj::xperlfunc ':all';

our $tmp= do {
    if ($opt{attachment_basedir}) {
	xmkdir $opt{attachment_basedir} if not -d $opt{attachment_basedir};
	$opt{attachment_basedir}
    } else {
	my $create= sub {
	    my $t= tempdir $tmpbase;
	    xsymlink $t, $tmplink;
	    $t
	};
	if (my $p= readlink( $tmplink)) {
	    if (my $s= Xstat $p) {
		if ($s->uid == $>) {
		    $p
		} else {
		    warn "directory pointed to by '$tmplink' ('$p') is owned by somebody else, creating a new one instead";
		    xunlink $tmplink;
		    &$create;
		}
	    } else {
		xunlink $tmplink;
		&$create;
	    }
	} else {
	    &$create;
	}
    }
};


sub print_deidentify {
    my ($str)=@_;
    my $m= Chj::Ml2json::Debug::deidentify($str,$tmp);
    print $m->ent->as_string
      or die $!;
}

if (@deidentify) {
    require Chj::Ml2json::Debug;
    print_deidentify $_
      for @deidentify;
    exit 0;
}

if ($opt{show_mbox_path}) {
    my ($md5)= $opt{show_mbox_path}=~ /\b([a-f0-9]{32})\b/
      or usage "does not contain an md5 hex string: '$opt{show_mbox_path}'";
    my $p="$tmp/$md5";
    my $mbox= Chj::Ml2json::Ghostable->load($p);
    if (my $path= $mbox->path) {
	print $path,"\n" or die $!;
    } else {
	die "The object stored at '$p' does not have path field, seems to have been generated before adding this feature; run --cleanup and run the conversion again";
    }
}

sub cleanup_tmp {
    if ($opt{attachment_basedir}) {
	my $p= $opt{attachment_basedir};
	system ("rm", "-rf", "--", $p)==0 or die "rm -rf '$p' failed";
    } else {
	# partially COPYPASTE..
	if (my $p= readlink( $tmplink)) {
	    if (my $s= Xstat $p) {
		if ($s->uid == $>) {
		    $p=~ m|^/| or die "not an absolute target location: '$p'";
		    unlink $tmplink;
		    system ("rm", "-rf", "--", $p)==0 or die "rm -rf '$p' failed";
		} else {
		    warn "directory pointed to by '$tmplink' ('$p') is owned by somebody else";
		}
	    } else {
		xunlink $tmplink;
	    }
	}
    }
}

use Chj::Ml2json::MailcollectionParser;
use Chj::Ml2json::Message;
use Chj::FP2::Stream ':all';
use Chj::Ml2json::OutputJSON;
use Chj::Ml2json::OutputJSON::Continuous;
use Chj::Try;
use Chj::xopen ':all';
use Chj::Ml2json::Parse::HTML;
use Chj::xperlfunc ':all';
use Chj::Parallel;
use Chj::PClosure;
use Chj::Browser;
use Chj::chompspace;
use Chj::Ml2json::Parse::TextStripper;
use Chj::Ml2json::Ghosts; # Chj::Ml2json::Ghostable, Chj::Ml2json::Ghost


$Chj::Ml2json::MIMEExtract::good_words= # XX hacky way to set
  do {
      my $f= xopen_read $opt{good_words_path};
      binmode $f, ":encoding(utf-8)" or die;
      my %w;
      while (<$f>) {
	  $_= chompspace $_;
	  next if /^#/;
	  next unless length $_;
	  $w{$_}=1;
      }
      $f->xclose;
      \%w
  };

sub identify2xhtml_basename {
    my ($idn)=@_;
    $idn=~ s|/|-|g;
    "$idn.xhtml"
}

sub identify2xhtml_path {
    my ($idn)=@_;
    "$opt{html_to}/".identify2xhtml_basename($idn)
}


our $parallel= Chj::Parallel->new($opt{jobs});


our $collectionparser= Chj::Ml2json::MailcollectionParser->new
  ('Chj::Ml2json::Message',
   $opt{mbox_glob},
   $opt{recurse});


## config file input ?
our $htmlmapper= Chj::Ml2json::Parse::HTML->new_
  (content_subtype=> "html",
   do_paragraphy=> $opt{do_paragraphy},
   do_newline2br=> $opt{do_newline2br});
our $enrichedmapper= Chj::Ml2json::Parse::HTML->new_
  (content_subtype=> "enriched",
   do_paragraphy=> 1,
   do_newline2br=> 0);

our $textstripper= Chj::Ml2json::Parse::TextStripper->new
  ($opt{strip_text});

our $outputjson= Chj::Ml2json::OutputJSON->new
  ($opt{jsonfields_orig_headers},
   $opt{jsonfields_top},
   $htmlmapper,
   $enrichedmapper,
   $textstripper,
   "Chj::Ml2json::Parse::HTML",
   $opt{do_confirm_html},
   $tmp
  );

use Chj::PXML::Serialize 'puthtmlfile';
use Chj::PXHTML ':all';
sub with_wrap_if (&$$){
    my ($fn,$val,$cond)=@_;
    $cond ? do{ local $_= $val; &$fn($val)} : $val
}
use Scalar::Util 'weaken';
use Chj::FP::ArrayUtil ':all';
sub nobr {
    SPAN({style=> "white-space:nowrap;"}, @_)
}
use Chj::Ml2json::Color;
our $textbackgroundcol= Chj::Ml2json::Color->new_htmlstring("#e0f0ff");
our $blockquoteendcol= Chj::Ml2json::Color->new_htmlstring("#ffffff");
sub phrase_dequote {
    my ($maybe_str)=@_;
    $maybe_str and do {
	my $str= $maybe_str;
	$str=~ s/^\s*\"//s;
 	$str=~ s/\"\s*\z//s;
	$str
    }
}
sub phrase_deparentisize {
    my ($maybe_str)=@_;
    $maybe_str and do {
	my $str= $maybe_str;
	$str=~ s/^\s*\(//s;
 	$str=~ s/\)\s*\z//s;
	$str
    }
}

our $style_css= STYLE ({type=>"text/css"},
		       (map {
			   my $col= $textbackgroundcol->shade_exponentially_towards
			     ($blockquoteendcol, 0.6, $_)->htmlstring;
			   ".quotelevel_$_ { background-color:$col; }\n"
		       } 1..15),
		       ".ref_precise {list-style: disc; }\n",
		       ".ref_subject {list-style: square; }\n",
		      );


our ($json, $index);

sub id2maybe_mg {
    my ($id)=@_;
    if (my $v= $index->ids->{$id}) {
	$$v[1]
    } else {
	()
    }
}

sub fromstr ($) {
    my ($from)=@_;
    (phrase_dequote($$from{phrase})
     || phrase_deparentisize($$from{comment})
     || $opt{link_mail_address}->($$from{address}))
}

sub id_showthread {
    my ($maybe_selected_id)=@_;
    my $showthread; $showthread= sub {
	my ($subthread, $maybe_prev_cookedsubject)=@_;
	my $_id= $$subthread{id};
	if (my $mg= id2maybe_mg ($_id)) {
	    my $m= $mg->resurrect;
	    my $url= identify2xhtml_basename($m->identify);

	    my ($from)= @{$outputjson->json_parsed_from($m,undef)};
	    my $fromstr= fromstr($from);

	    my $maybe_date= $opt{archive_date_thread}->
	      ($m->header_hashref_lc->{date},
	       $m->unixtime);
	    my $cookedsubject= $outputjson->json_cooked_subject($m,undef);

	    my $cont = do {
		if ($maybe_prev_cookedsubject
		    and $maybe_prev_cookedsubject eq $cookedsubject) {
		    ($maybe_date ?
		     [I($fromstr), ", ", $maybe_date]
		      : I($fromstr))
		}
		else {
		    my $subject= $outputjson->json_decoded_subject($m,undef);
		    [$subject, " ",
		     ($maybe_date ?
		      ["(", I($fromstr), ", ", $maybe_date, ")"]
		      : I("(",$fromstr, ")"))]
		}
	    };

	    my $possiblylinkedcont=
	      (defined $maybe_selected_id
	       and $_id eq $maybe_selected_id) ? $cont : A({href=> $url}, $cont);

	    DIR({compact=>1},
		LI({class=> "ref_".$$subthread{ref}},
		   $possiblylinkedcont),
		array_map(sub {
			      @_=(@_,$cookedsubject); goto $showthread
			  }, $$subthread{replies}))
	} else {
	    WARN "shouldn't happen here?: id '$_id'";
	    undef
	}
    };
    my $_showthread= $showthread; weaken $showthread;
    $showthread
}

sub do_output_message {
    my ($m,$pos)=@_;
    Try {
	if ($opt{json_to}) {
	    $json->set_not_first(1)
	      if ($opt{jobs} > 1 and $pos > 0);
	    $json->message_print($m,$index);
	}

	my $idn= $m->identify;
	my $source_path;
	if ($opt{source_to}) {
	    my $path= "$opt{source_to}/$idn.txt";
	    mkdir dirname($path);
	    my $out= xopen_write $path;
	    # Choice of either deparsing the entity, which is
	    # not the same as what was originally parsed (but
	    # it would show what was lost in the MIME parser)
	    if (0) {
		$out->xprint($m->ent->as_string);
	    } else {
		# or re-read the slice of the original mbox
		# file; XX assumes that the file is still
		# unchanged!
		$m->mboxslice->xsendfile_to($out);
	    }
	    $out->xclose;
	    $source_path= $path;
	}
	if ($opt{html_to}) {
	    my $id= $m->id;
	    my $path= identify2xhtml_path($idn);
	    # iceweasel ignores encoding in .html files, thus
	    # needs to be .xhtml suffix
	    my $fragment= $outputjson->html($m);
	    my $header_hashref_lc= $m->header_hashref_lc;
	    my $ctime_UTC= $outputjson->json_ctime_UTC($m,$index);
	    my $attachments= $outputjson->json_attachments($m,$index);
	    my $subject= $outputjson->json_decoded_subject($m,$index);
	    my $inreplyto= $outputjson->json_in_reply_to ($m,$index);
	    my $replies= $outputjson->json_replies($m,$index);
	    my $threadleaders= $outputjson->json_threadleaders($m,$index);
	    my $maybe_threadleader=
	      (@$threadleaders == 1) ? $$threadleaders[0] : undef;
	    my $threadparents= $outputjson->json_threadparents($m,$index);
	    my $maybe_threadparent=
	      (@$threadparents == 1) ? $$threadparents[0] : undef;
	    my $msg_id2maybe_url= sub {
		my ($id)=@_;
		if (my $mg= id2maybe_mg ($id)) {
		    my $m= $mg->resurrect; # necessary as $mg->identify is different
		    identify2xhtml_basename($m->identify);
		} else {
		    undef
		}
	    };
	    my @choice= $m->origplain_origrich_orightml_string ($opt{do_confirm_html});
	    my $choice= array_zip2 \@choice, [qw(plain rich html)];
	    my $choosen= $outputjson->html_choice($m);


	    my $perhaps_source_link= $source_path && do {
		my $rel= File::Spec->abs2rel($source_path, dirname($path));
		["; ", A({href=> $rel}, "source")]
	    };

	    my %addrs=
	      map {
		  my $vs= $outputjson->_json_mailparsed_header($m,$_);
		  ($_=> do {
		      if (@$vs) {
			  array_join
			    ([
			      map {
				  [defined $$_{phrase}
				   ? phrase_dequote($$_{phrase})." "
				   : undef,
				   TT("<", $opt{link_mail_address}->($$_{address}),
				      ">"),
				   defined $$_{comment}
				   ? " ".phrase_deparentisize($$_{comment})." "
				   : undef]
			      } @$vs
			     ],
			     ", ")
		      } else {
			  undef
		      }
		  })
	      } qw(from to cc);
	    my $fromstr= fromstr ($outputjson->_json_mailparsed_header($m,"from")
				 ->[0]);
	    my $page=
	      HTML
		(HEAD (TITLE ($opt{archive_message_title}->
			      ($idn, $subject, $fromstr)),
		       $style_css),
		 BODY
		 ({bgcolor=>"#964a2a"},
		  TABLE ({border=>0,
			  cellspacing=>3,
			  cellpadding=>16,
			  width=>"88%",
			  align=>"center",
			 },
			 TR
			 (TD
			  ({colspan=>2,
			    bgcolor=> "#f0f8ff"},
			   TABLE
			   ({border=>0},
			    (
			     map {
				 @$_==2 or die;
				 my ($key,$val)=@$_;
				 TR ({valign=>"top"},
				     TD ({align=>"right"},
					 "$key:$nbsp"),
				     TD ($val))
			     }
			     ["Subject",
			      #with_wrap_if {
			      #	  A({href=> &$msg_id2url ($maybe_threadleader)}, $_)
			      #} B($$orig_headers{Subject}), $maybe_threadleader
			      #sigh, more complicated (maybe monad?):
			      do {
				  my $V0= B($subject);
				  if ($maybe_threadparent) {
				      if (my $V2= &$msg_id2maybe_url ($maybe_threadparent)) {
					  A({href=> $V2}, $V0)
				      } else {
					  $V0
				      }
				  } else {
				      $V0
				  }
			      }
			     ],
			     ["From", #$$header_hashref_lc{from}
			      $addrs{from}],
			     ["To",# $$header_hashref_lc{to},
			      [$addrs{to},
			       #$$orig_headers{Cc}..
			       ($addrs{cc} and [", Cc: ", $addrs{cc}])]],
			     ["Date",
			      $opt{archive_date_message}->
			      ($$header_hashref_lc{date},
			       $ctime_UTC,
			       $m->unixtime)]
			    ),
			    ($opt{show_messageid_and_source}->()
			     ? TR({valign=>"top"},
				  TD(SMALL("Message-ID:")),
				  TD(SMALL($id,
					   " $nbsp ",
					   nobr
					   ("Choice:",
					    (map {
						my ($used,$msg)=@$_;
						($used
						 ? [" ",
						    ($choosen eq $msg ? B($msg) : $msg)]
						 : undef)
					    } @$choice),
					    $perhaps_source_link))))
			    : undef)))),
			 TR (TD ({colspan=>2,
				  bgcolor=> $textbackgroundcol->htmlstring},
				 $fragment)),
			 (@$attachments
			  ? (map {
			      my $att=$_;
			      my $attpath= $$att{path};
			      my $loc=
				File::Spec->abs2rel($attpath, dirname($path));
			      my $name= basename($attpath);
			      my $formatleft=
				+{ bgcolor=> $textbackgroundcol->htmlstring,
				   valign=>"top",
				   align=> "right"};
			      my $formatright=
				+{ bgcolor=> $textbackgroundcol->htmlstring,
				   valign=>"top",
				   align=> "left"};
			      if ($$att{disposition} eq "inline"
				  and
				  $$att{content_type} =~ /^image/) {
				  TR(TD($formatleft,
					"Image ($$att{content_type}): ", BR,
					$name),
				     TD($formatright,
					IMG ({src=> $loc,
					      title=> $name})))
			      } else {
				  TR(TD($formatleft,
					"Attachment ($$att{content_type}): "),
				     TD($formatright,
					A ({href=> $loc}, $name)))
			      }
			  } @$attachments)
			  :()),
			 TR (TD ({colspan=>2,
				  bgcolor=> "#f0f8ff"},
				 ($maybe_threadleader and
				  id_showthread($id)
				  ->($index->thread($maybe_threadleader))))))));
	    puthtmlfile($path, $page, "en");
	}
    } $m;
}

sub parse_and_convert {
    my $coll= $collectionparser->parse_trees
      ($opt{sourcepaths}, $tmp, $opt{max_date_deviation});

    local $index= $coll->index ($opt{max_thread_duration});

    if ($opt{repl}) {
	Chj::repl::repl();
	exit;
    }
    if (@open_message_id or @open_identify) {
	my $idf=
	  [
	   (map {
	       my $id= $$index{messageids}{$_} || $_;
	       my $t_mg= $$index{ids}{$id}
		 or die "unknown message id '$id'";
	       my ($t,$mg)=@$t_mg;
	       $mg->resurrect->identify
	   } @open_message_id),
	   (map {
	       m{\b([a-f0-9]{32}[/-]\d+)\b}
		 or die "could not find identify string in '$_'";
	       my $str= $1;
	       $str=~ s|-|/|;
	       $str
	   } @open_identify)
	  ];
	Browser_exec map {
	    my $p=identify2xhtml_path($_);
	    #my $absp= $p=~ m|^/| ? $p : $ENV{PWD}."/".$p;
	    my $absp= abs_path $p;
	    "file://$absp"
	} @{array_hashing_uniq $idf};
    }

    if ($opt{html_to} and not -d $opt{html_to}) {
	xmkdir $opt{html_to}
    }
    if ($opt{source_to} and not -d $opt{source_to}) {
	xmkdir $opt{source_to}
    }
    my $allout= sub {
	my $o;
	if ($opt{json_to}) {
	    $o= xopen_write $opt{json_to};
	    binmode $o, ":utf8" or die;
	}
	local $json= Chj::Ml2json::OutputJSON::Continuous->new($o,$outputjson);
	#^ XX HACK: $o may be undefined; really misusing that
	# mechanism now.
	if ($opt{json_to}) {
	    $json->print_opening;
	}

	my $par1_tmpdir= tempdir "/tmp/$myname-par1";##XXX
	# Instead of passing context through the PClosure, instantiate
	# after having put the nonserializable/big parts into dynamic
	# variables ($json, $index).
	my $par1= $parallel->instantiate ($par1_tmpdir, [$o ? $o : ()]);

	my $filter_max_age= sub {
	    my ($msgs)=@_;
	    undef $_[0];
	    if (my $td= $opt{filter_max_age}) {
		my $cutoff_t = $start_t - $td;
		stream_filter (sub {
				   local our ($m)=@_;
				   $m->unixtime > $cutoff_t
			       }, $msgs);
	    } else {
		$msgs
	    }
	};

	if ($opt{html_index}) {
	    # (XX parallelize how? par stream_map wanted, then do it in do_output_message ?)
	    my $showthread= id_showthread(undef);
	    my $threadleader_ids= array2stream $index->all_threadleaders_sorted;
	    my $threadleaders= stream_map $index->id2m, $threadleader_ids;
	    $threadleaders= &$filter_max_age ($threadleaders); # XXX is this precise enough (cutoff point vs files)?
	    my $indexpage=
	      HTML
		(HEAD (TITLE ("Thread index"),
		       $style_css),
		 BODY
		 ({bgcolor=>"#e0e0e0"},
		  stream_map sub {
		      my ($threadleader)=@_;
		      &$showthread($index->thread($threadleader->id))
			# XX stupid. id to m to id; would even have t intermediately for the filter_max_age.
		  }, $threadleaders));
	    puthtmlfile ($opt{html_index}, $indexpage);
	}

	my $msgs = $index->all_messages_threadsorted;
	$msgs= &$filter_max_age($msgs);

	my $len= $par1->stream_for_each(PClosure(*do_output_message), $msgs, 20);

	if ($opt{json_to}) {
	    #$json->set_not_first($len);
	    $json->end;
	    $o->xclose;
	}

	$par1->close;
    };

    &$allout;
}

use Chj::Backtrace;
$SIG{INT}= sub {
    use Carp 'cluck';
    cluck "got SIGINT";
    exit 1;
};


if ($opt{repl}) {
    import Chj::Ml2json::MIMEExtract ':all';
    require Chj::Ml2json::Debug;
    import Chj::Ml2json::Debug;
    require Chj::repl;
    Chj::repl::repl() unless have $opt{sourcepaths};
}

if ($opt{cleanup}) {
    cleanup_tmp();
    exit 0;
}

parse_and_convert if (have $opt{sourcepaths} or @open_identify);

