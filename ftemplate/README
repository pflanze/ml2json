PXML intends to be a simple, Perl based representation for XML, or at
least the subset that's necessary for doing most tasks. Currently it
doesn't support XML namespaces properly (manually prefixing element
names may be a workable solution, though?). It is meant to *produce*
XML output; handling parsed XML is out of the scope. 

Its in-memory representation are Chj::PXML objects. Serialization to
file handles is done using procedures from
Chj::PXML::Serialize. 

The body of elements can be a mix of standard Perl arrays, linked
lists based on Chj::FP2::List, and promises (Chj::FP2::Lazy) which
allows for the generation of streaming output.

Direct creation of XML elements:

 use Chj::PXML;
 my $element= Chj::PXML->new("a", {href=> "http://myserver.com"}, ["my server"]);

Using 'tag functions' for shorter code:

 use Chj::PXHTML;
 my $element= A({href=> "http://myserver.com"}, "my server");

See 'test' and 'testlazy' for complete examples.


When generating HTML, CGI.pm's tag functions seem similar, what are
the differences?

 - Chj::PXHTML chooses upper-case constructor names to reduce the
   chances for conflicts; for example using "tr" for <TR></TR>
   conflicts with the tr builtin Perl operator.

 - CGI.pm's creators return strings, whereas Chj::PXHTML returns
   Chj::PXML objects. The former might have O(n^2) complexity with the
   size of documents (getting slower to concatenate big strings),
   while the latter should have constant overhead. Also, PXML can be
   inspected after creation, an option not possible with CGI.pm
   (without using an XML parser).

 - Chj::PXHTML / Chj::PXML serialization always escape strings, hence
   is safe against XSS, while CGI.pm does/is not.

 - Chj::PXHTML / Chj::PXML chose not to support dashes on attributes,
   like {-href=> "foo"}, as the author feels that this is unnecessary
   clutter both for the eyes and for the programmer wanting to access
   attributes from such hashes, and added complexity/runtime cost for
   the serializer.

